AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Task Definition for Falcon MCP Server'

Parameters:
  ECRRepositoryURI:
    Type: String
    Description: 'ECR Repository URI for the Falcon MCP Docker image (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com/falcon-mcp:latest)'
  
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: falcon-mcp
    Description: Name of the project
  
  ImageTag:
    Type: String
    Default: latest
    Description: Docker image tag to use
  
  TaskCpu:
    Type: String
    Default: '256'
    AllowedValues:
      - '256'
      - '512'
      - '1024'
      - '2048'
      - '4096'
    Description: 'CPU units for the task (256 = 0.25 vCPU)'
  
  TaskMemory:
    Type: String
    Default: '512'
    AllowedValues:
      - '512'
      - '1024'
      - '2048'
      - '3072'
      - '4096'
      - '5120'
      - '6144'
      - '7168'
      - '8192'
    Description: 'Memory (in MiB) for the task'
  
  ContainerPort:
    Type: Number
    Default: 8000
    Description: 'Port that the Falcon MCP server listens on (8000 for HTTP transports, not used for stdio)'
  
  FalconClientId:
    Type: String
    NoEcho: true
    Description: 'CrowdStrike Falcon API Client ID'
  
  FalconClientSecret:
    Type: String
    NoEcho: true
    Description: 'CrowdStrike Falcon API Client Secret'
  
  FalconBaseUrl:
    Type: String
    Default: 'https://api.crowdstrike.com'
    Description: 'CrowdStrike Falcon API Base URL'
  
  FalconMCPModules:
    Type: String
    Default: ''
    Description: 'Comma-separated list of modules to enable (e.g., detections,incidents,intel,spotlight,idp). Leave empty for all modules.'
  
  FalconMCPTransport:
    Type: String
    Default: 'sse'
    AllowedValues:
      - 'stdio'
      - 'sse'
      - 'streamable-http'
    Description: 'Transport protocol for the MCP server (sse recommended for containers)'
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'VPC ID where the ECS service will run'
  
  AllowedCidrBlocks:
    Type: CommaDelimitedList
    Default: '10.0.0.0/8,172.16.0.0/12,192.168.0.0/16'
    Description: 'Comma-delimited list of CIDR blocks allowed to access the Falcon MCP service'

Conditions:
  IsNotStdioTransport: !Not [!Equals [!Ref FalconMCPTransport, "stdio"]]

Resources:
  # ================================
  # ECS Task Execution Role
  # ================================
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-ecs-execution-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-ecs-execution-role"
        - Key: Environment
          Value: !Ref Environment

  # ================================
  # ECS Task Role (for application permissions)
  # ================================
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-ecs-task-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FalconMCPPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Add any AWS permissions that the Falcon MCP server needs
              # This is a placeholder - adjust based on actual requirements
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-ecs-task-role"
        - Key: Environment
          Value: !Ref Environment

  # ================================
  # CloudWatch Log Group
  # ================================
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}-${Environment}"
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-ecs-logs"
        - Key: Environment
          Value: !Ref Environment

  # ================================
  # Security Group for ECS Service
  # ================================
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-ecs-sg-${Environment}"
      GroupDescription: !Sub "Security group for ${ProjectName} ECS service"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: !Select [0, !Ref AllowedCidrBlocks]
          Description: "Allow inbound traffic to Falcon MCP service from first CIDR block"
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: !Select [1, !Ref AllowedCidrBlocks]
          Description: "Allow inbound traffic to Falcon MCP service from second CIDR block"
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: !Select [2, !Ref AllowedCidrBlocks]
          Description: "Allow inbound traffic to Falcon MCP service from third CIDR block"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: "Allow HTTPS outbound for CrowdStrike API calls"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "Allow HTTP outbound for health checks and updates"
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: "Allow DNS over TCP"
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: "Allow DNS over UDP"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-ecs-security-group"
        - Key: Environment
          Value: !Ref Environment

  # ================================
  # ECS Task Definition
  # ================================
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ProjectName}-${Environment}"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${ProjectName}-container"
          Image: !Sub "${ECRRepositoryURI}:${ImageTag}"
          Essential: true
          PortMappings: !If
            - IsNotStdioTransport
            - - ContainerPort: !Ref ContainerPort
                Protocol: tcp
            - !Ref "AWS::NoValue"
          EntryPoint:
            - "python"
            - "-m"
            - "falcon_mcp.server"
          Command:
            - "--transport"
            - !Ref FalconMCPTransport
            - !If 
              - IsNotStdioTransport
              - !Sub "--host=0.0.0.0"
              - !Ref "AWS::NoValue"
            - !If
              - IsNotStdioTransport
              - !Sub "--port=${ContainerPort}"
              - !Ref "AWS::NoValue"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: FALCON_CLIENT_ID
              Value: !Ref FalconClientId
            - Name: FALCON_CLIENT_SECRET
              Value: !Ref FalconClientSecret
            - Name: FALCON_BASE_URL
              Value: !Ref FalconBaseUrl
            - Name: FALCON_MCP_MODULES
              Value: !Ref FalconMCPModules
          # Health check configuration
          HealthCheck: !If
            - IsNotStdioTransport
            - Command:
                - CMD-SHELL
                - !Sub "curl -f http://localhost:${ContainerPort}/health || exit 1"
              Interval: 30
              Timeout: 10
              Retries: 3
              StartPeriod: 60
            - !Ref "AWS::NoValue"
          # Resource requirements
          Memory: !Ref TaskMemory
          MemoryReservation: !Ref TaskMemory
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-task-definition"
        - Key: Environment
          Value: !Ref Environment

Outputs:
  ECSTaskDefinitionArn:
    Description: ARN of the ECS Task Definition
    Value: !Ref ECSTaskDefinition
    Export:
      Name: !Sub "${ProjectName}-task-definition-arn-${Environment}"

  ECSTaskDefinitionFamily:
    Description: Family name of the ECS Task Definition
    Value: !Sub "${ProjectName}-${Environment}"
    Export:
      Name: !Sub "${ProjectName}-task-definition-family-${Environment}"

  ECSTaskExecutionRoleArn:
    Description: ARN of the ECS Task Execution Role
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub "${ProjectName}-ecs-execution-role-arn-${Environment}"

  ECSTaskRoleArn:
    Description: ARN of the ECS Task Role
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub "${ProjectName}-ecs-task-role-arn-${Environment}"

  ECSLogGroupName:
    Description: Name of the CloudWatch Log Group
    Value: !Ref ECSLogGroup
    Export:
      Name: !Sub "${ProjectName}-ecs-log-group-${Environment}"

  ContainerImage:
    Description: Container image used in the task definition
    Value: !Sub "${ECRRepositoryURI}:${ImageTag}"
    Export:
      Name: !Sub "${ProjectName}-container-image-${Environment}"

  ECSSecurityGroupId:
    Description: ID of the ECS Security Group
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub "${ProjectName}-ecs-security-group-id-${Environment}"

  ECSSecurityGroupArn:
    Description: ARN of the ECS Security Group
    Value: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${ECSSecurityGroup}"
    Export:
      Name: !Sub "${ProjectName}-ecs-security-group-arn-${Environment}"
